import { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR, Validators } from '@angular/forms';
import { parseGermanAddress } from '../../helpers/parser';
import { Appearance } from '../mat-google-maps-autocomplete.component';
import { InputAnimations } from '../../animations';
import { debounceTime, distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "@angular/material/form-field";
import * as i3 from "@angular/material/icon";
import * as i4 from "@angular/flex-layout/flex";
import * as i5 from "@angular/common";
import * as i6 from "@angular/material/input";
import * as i7 from "../../directives/mat-google-maps-autocomplete.directive";
export class MatSearchGoogleMapsAutocompleteComponent {
    constructor(formBuilder) {
        this.formBuilder = formBuilder;
        this.appearance = Appearance.STANDARD;
        this.searchAddressLabel = 'Search Address';
        this.streetNameLabel = 'Street';
        this.streetNumberLabel = 'Nr.';
        this.postalCodeLabel = 'PLZ';
        this.localityLabel = 'Locality';
        this.vicinityLabel = 'Vicinity';
        this.onGermanAddressMapped = new EventEmitter();
        this.firstInit = true;
        this.propagateChange = (_) => {
        };
        // Set the private defaults
        this._unsubscribeAll = new Subject();
    }
    get value() {
        return this._value;
    }
    set value(value) {
        this._value = value;
        this.propagateChange(this.value);
        // console.log('setValue', this._value);
    }
    ngOnInit() {
        this.createAddressFormGroup();
        this.enableCustomInput();
    }
    createAddressFormGroup() {
        this.addressFormGroup = this.formBuilder.group({
            streetName: [this.value && this.value.streetName ? this.value.streetName : null, Validators.required],
            streetNumber: [this.value && this.value.streetNumber ? this.value.streetNumber : null, Validators.required],
            postalCode: [this.value && this.value.postalCode ? this.value.postalCode : null, Validators.required],
            vicinity: [this.value && this.value.vicinity ? this.value.vicinity : null],
            locality: this.formBuilder.group({
                long: [this.value && this.value.locality && this.value.locality.long ? this.value.locality.long : null, Validators.required],
            }),
        });
    }
    enableCustomInput() {
        this.addressFormGroup
            .get('streetName')
            .valueChanges
            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))
            .subscribe(streetName => {
            !this.value ? this.value = { streetName } : this.value.streetName = streetName;
            this.value.displayAddress = this.parseDisplayAddress();
            this.propagateChange(this.value);
        });
        this.addressFormGroup
            .get('streetNumber')
            .valueChanges
            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))
            .subscribe(streetNumber => {
            !this.value ? this.value = { streetNumber } : this.value.streetNumber = streetNumber;
            this.value.displayAddress = this.parseDisplayAddress();
            this.propagateChange(this.value);
        });
        this.addressFormGroup
            .get('postalCode')
            .valueChanges
            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))
            .subscribe(postalCode => {
            !this.value ? this.value = { postalCode } : this.value.postalCode = postalCode;
            this.value.displayAddress = this.parseDisplayAddress();
            this.propagateChange(this.value);
        });
        this.addressFormGroup
            .get('vicinity')
            .valueChanges
            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))
            .subscribe(vicinity => {
            !this.value ? this.value = { vicinity } : this.value.vicinity = vicinity;
            this.value.displayAddress = this.parseDisplayAddress();
            this.propagateChange(this.value);
        });
        this.addressFormGroup
            .get('locality')
            .valueChanges
            .pipe(distinctUntilChanged(), debounceTime(400), takeUntil(this._unsubscribeAll))
            .subscribe(locality => {
            !this.value ? this.value = { locality } : this.value.locality = locality;
            this.value.displayAddress = this.parseDisplayAddress();
            this.propagateChange(this.value);
        });
    }
    parseDisplayAddress() {
        return `${this.value?.streetName ? this.value?.streetName : ''} ${this.value?.streetNumber ? this.value?.streetNumber : ''}${this.value?.postalCode || this.value?.locality?.long ? ', ' : ''}${this.value?.postalCode ? this.value?.postalCode : ''} ${this.value?.locality?.long ? this.value?.locality?.long : ''}`;
    }
    syncAutoComplete($event) {
        if (this.germanAddress) {
            this.addressFormGroup.reset();
        }
        const germanAddress = parseGermanAddress($event);
        this.germanAddress = germanAddress;
        if (germanAddress.vicinity) {
            this.addressFormGroup.get('vicinity').patchValue(germanAddress.vicinity, { emitEvent: false, onlySelf: true });
        }
        if (germanAddress.streetName) {
            this.addressFormGroup.get('streetName').patchValue(germanAddress.streetName, { emitEvent: false, onlySelf: true });
        }
        if (germanAddress.streetNumber) {
            this.addressFormGroup.get('streetNumber').patchValue(germanAddress.streetNumber.toString(), { emitEvent: false, onlySelf: true });
        }
        if (germanAddress.postalCode) {
            this.addressFormGroup.get('postalCode').patchValue(germanAddress.postalCode, { emitEvent: false, onlySelf: true });
        }
        if (germanAddress.locality && germanAddress.locality.long) {
            this.addressFormGroup.get('locality.long').patchValue(germanAddress.locality.long, { emitEvent: false, onlySelf: true });
        }
        this.value = germanAddress;
        this.onGermanAddressMapped.emit(germanAddress);
    }
    writeValue(obj) {
        let shouldRecreateFG = false;
        if (obj) {
            if (!this.value && this.firstInit) {
                shouldRecreateFG = true;
            }
            this.value = obj;
            if (shouldRecreateFG) {
                this.createAddressFormGroup();
                this.firstInit = false;
            }
        }
    }
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    registerOnTouched(fn) {
    }
    setDisabledState(isDisabled) {
    }
}
MatSearchGoogleMapsAutocompleteComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: MatSearchGoogleMapsAutocompleteComponent, deps: [{ token: i1.FormBuilder }], target: i0.ɵɵFactoryTarget.Component });
MatSearchGoogleMapsAutocompleteComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.2", type: MatSearchGoogleMapsAutocompleteComponent, selector: "mat-search-google-maps-autocomplete", inputs: { searchBarAppearance: "searchBarAppearance", appearance: "appearance", searchAddressLabel: "searchAddressLabel", streetNameLabel: "streetNameLabel", streetNumberLabel: "streetNumberLabel", postalCodeLabel: "postalCodeLabel", localityLabel: "localityLabel", vicinityLabel: "vicinityLabel", showVicinity: "showVicinity", country: "country", placeIdOnly: "placeIdOnly", strictBounds: "strictBounds", types: "types", type: "type", readonly: "readonly", disableSearch: "disableSearch", _value: "_value", value: "value" }, outputs: { onGermanAddressMapped: "onGermanAddressMapped" }, providers: [
        {
            provide: NG_VALUE_ACCESSOR,
            useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),
            multi: true
        }
    ], ngImport: i0, template: "<div fxLayout=\"column\">\n  <div *ngIf=\"!disableSearch\" fxFlex=\"100\">\n    <!--search address-->\n    <mat-form-field fxFlex=\"auto\" [appearance]=\"searchBarAppearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n      <mat-label>{{searchAddressLabel}}</mat-label>\n      <input\n        (onAutocompleteSelected)=\"syncAutoComplete($event)\"\n        [country]=\"country\"\n        [placeIdOnly]=\"placeIdOnly\"\n        [strictBounds]=\"strictBounds\"\n        [types]=\"types\"\n        [type]=\"type\"\n        matGoogleMapsAutocomplete\n        matInput\n        required\n      />\n      <mat-icon color=\"primary\" matSuffix>search</mat-icon>\n      <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n    </mat-form-field>\n  </div>\n\n  <form [formGroup]=\"addressFormGroup\" fxFlex fxLayoutGap=\"10px\">\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"80\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNameLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetName\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNumberLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetNumber\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n    </div>\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{postalCodeLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"postalCode\"\n          type=\"number\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field *ngIf=\"showVicinity\" fxFlex=\"auto\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{vicinityLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          matInput\n          formControlName=\"vicinity\"\n        />\n      </mat-form-field>\n      <div formGroupName=\"locality\" fxFlex=\"auto\">\n        <mat-form-field fxFlex=\"auto\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n          <mat-label>{{localityLabel}}</mat-label>\n          <input\n            [readonly]=\"readonly\"\n            formControlName=\"long\"\n            matInput\n            required\n          />\n          <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>\n          <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n        </mat-form-field>\n      </div>\n    </div>\n  </form>\n</div>\n", styles: [""], components: [{ type: i2.MatFormField, selector: "mat-form-field", inputs: ["color", "appearance", "hideRequiredMarker", "hintLabel", "floatLabel"], exportAs: ["matFormField"] }, { type: i3.MatIcon, selector: "mat-icon", inputs: ["color", "inline", "svgIcon", "fontSet", "fontIcon"], exportAs: ["matIcon"] }], directives: [{ type: i4.DefaultLayoutDirective, selector: "  [fxLayout], [fxLayout.xs], [fxLayout.sm], [fxLayout.md],  [fxLayout.lg], [fxLayout.xl], [fxLayout.lt-sm], [fxLayout.lt-md],  [fxLayout.lt-lg], [fxLayout.lt-xl], [fxLayout.gt-xs], [fxLayout.gt-sm],  [fxLayout.gt-md], [fxLayout.gt-lg]", inputs: ["fxLayout", "fxLayout.xs", "fxLayout.sm", "fxLayout.md", "fxLayout.lg", "fxLayout.xl", "fxLayout.lt-sm", "fxLayout.lt-md", "fxLayout.lt-lg", "fxLayout.lt-xl", "fxLayout.gt-xs", "fxLayout.gt-sm", "fxLayout.gt-md", "fxLayout.gt-lg"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.DefaultFlexDirective, selector: "  [fxFlex], [fxFlex.xs], [fxFlex.sm], [fxFlex.md],  [fxFlex.lg], [fxFlex.xl], [fxFlex.lt-sm], [fxFlex.lt-md],  [fxFlex.lt-lg], [fxFlex.lt-xl], [fxFlex.gt-xs], [fxFlex.gt-sm],  [fxFlex.gt-md], [fxFlex.gt-lg]", inputs: ["fxFlex", "fxFlex.xs", "fxFlex.sm", "fxFlex.md", "fxFlex.lg", "fxFlex.xl", "fxFlex.lt-sm", "fxFlex.lt-md", "fxFlex.lt-lg", "fxFlex.lt-xl", "fxFlex.gt-xs", "fxFlex.gt-sm", "fxFlex.gt-md", "fxFlex.gt-lg"] }, { type: i2.MatLabel, selector: "mat-label" }, { type: i6.MatInput, selector: "input[matInput], textarea[matInput], select[matNativeControl],      input[matNativeControl], textarea[matNativeControl]", inputs: ["disabled", "id", "placeholder", "name", "required", "type", "errorStateMatcher", "aria-describedby", "value", "readonly"], exportAs: ["matInput"] }, { type: i7.MatGoogleMapsAutocompleteDirective, selector: "[matGoogleMapsAutocomplete]", inputs: ["address", "country", "placeIdOnly", "strictBounds", "types", "type", "autoCompleteOptions", "value"], outputs: ["onChange", "onAutocompleteSelected", "onGermanAddressMapped", "onLocationSelected"], exportAs: ["matGoogleMapsAutocomplete"] }, { type: i2.MatSuffix, selector: "[matSuffix]" }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i4.DefaultLayoutGapDirective, selector: "  [fxLayoutGap], [fxLayoutGap.xs], [fxLayoutGap.sm], [fxLayoutGap.md],  [fxLayoutGap.lg], [fxLayoutGap.xl], [fxLayoutGap.lt-sm], [fxLayoutGap.lt-md],  [fxLayoutGap.lt-lg], [fxLayoutGap.lt-xl], [fxLayoutGap.gt-xs], [fxLayoutGap.gt-sm],  [fxLayoutGap.gt-md], [fxLayoutGap.gt-lg]", inputs: ["fxLayoutGap", "fxLayoutGap.xs", "fxLayoutGap.sm", "fxLayoutGap.md", "fxLayoutGap.lg", "fxLayoutGap.xl", "fxLayoutGap.lt-sm", "fxLayoutGap.lt-md", "fxLayoutGap.lt-lg", "fxLayoutGap.lt-xl", "fxLayoutGap.gt-xs", "fxLayoutGap.gt-sm", "fxLayoutGap.gt-md", "fxLayoutGap.gt-lg"] }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["formControlName", "disabled", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i1.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { type: i1.FormGroupName, selector: "[formGroupName]", inputs: ["formGroupName"] }], animations: InputAnimations });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.2", ngImport: i0, type: MatSearchGoogleMapsAutocompleteComponent, decorators: [{
            type: Component,
            args: [{ selector: 'mat-search-google-maps-autocomplete', animations: InputAnimations, providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(() => MatSearchGoogleMapsAutocompleteComponent),
                            multi: true
                        }
                    ], template: "<div fxLayout=\"column\">\n  <div *ngIf=\"!disableSearch\" fxFlex=\"100\">\n    <!--search address-->\n    <mat-form-field fxFlex=\"auto\" [appearance]=\"searchBarAppearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n      <mat-label>{{searchAddressLabel}}</mat-label>\n      <input\n        (onAutocompleteSelected)=\"syncAutoComplete($event)\"\n        [country]=\"country\"\n        [placeIdOnly]=\"placeIdOnly\"\n        [strictBounds]=\"strictBounds\"\n        [types]=\"types\"\n        [type]=\"type\"\n        matGoogleMapsAutocomplete\n        matInput\n        required\n      />\n      <mat-icon color=\"primary\" matSuffix>search</mat-icon>\n      <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n    </mat-form-field>\n  </div>\n\n  <form [formGroup]=\"addressFormGroup\" fxFlex fxLayoutGap=\"10px\">\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"80\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNameLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetName\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{streetNumberLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"streetNumber\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n    </div>\n    <div fxLayout=\"row\" fxLayoutGap=\"10px\">\n      <mat-form-field fxFlex=\"20\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{postalCodeLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          formControlName=\"postalCode\"\n          type=\"number\"\n          matInput\n          required\n        />\n        <!--        <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>-->\n        <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n      </mat-form-field>\n      <mat-form-field *ngIf=\"showVicinity\" fxFlex=\"auto\"\n                      [appearance]=\"appearance\"\n                      [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n        <mat-label>{{vicinityLabel}}</mat-label>\n        <input\n          [readonly]=\"readonly\"\n          matInput\n          formControlName=\"vicinity\"\n        />\n      </mat-form-field>\n      <div formGroupName=\"locality\" fxFlex=\"auto\">\n        <mat-form-field fxFlex=\"auto\" [appearance]=\"appearance\" [@animate]=\"{ value: '*', params: { y: '100%' } }\">\n          <mat-label>{{localityLabel}}</mat-label>\n          <input\n            [readonly]=\"readonly\"\n            formControlName=\"long\"\n            matInput\n            required\n          />\n          <mat-icon color=\"primary\" matSuffix>add_location</mat-icon>\n          <!--    <mat-error>{{ 'msa.contactData.currentAddress.error' | translate }}</mat-error>-->\n        </mat-form-field>\n      </div>\n    </div>\n  </form>\n</div>\n", styles: [""] }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }]; }, propDecorators: { searchBarAppearance: [{
                type: Input
            }], appearance: [{
                type: Input
            }], searchAddressLabel: [{
                type: Input
            }], streetNameLabel: [{
                type: Input
            }], streetNumberLabel: [{
                type: Input
            }], postalCodeLabel: [{
                type: Input
            }], localityLabel: [{
                type: Input
            }], vicinityLabel: [{
                type: Input
            }], showVicinity: [{
                type: Input
            }], country: [{
                type: Input
            }], placeIdOnly: [{
                type: Input
            }], strictBounds: [{
                type: Input
            }], types: [{
                type: Input
            }], type: [{
                type: Input
            }], readonly: [{
                type: Input
            }], disableSearch: [{
                type: Input
            }], _value: [{
                type: Input
            }], onGermanAddressMapped: [{
                type: Output
            }], value: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF0LXNlYXJjaC1nb29nbGUtbWFwcy1hdXRvY29tcGxldGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1tYXRlcmlhbC1leHRlbnNpb25zL2dvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS9zcmMvbGliL2NvbXBvbmVudC9tYXQtc2VhcmNoLWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS9tYXQtc2VhcmNoLWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLW1hdGVyaWFsLWV4dGVuc2lvbnMvZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlL3NyYy9saWIvY29tcG9uZW50L21hdC1zZWFyY2gtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlL21hdC1zZWFyY2gtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pGLE9BQU8sRUFBK0MsaUJBQWlCLEVBQUUsVUFBVSxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0csT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFeEQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLDJDQUEyQyxDQUFDO0FBQ3JFLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsWUFBWSxFQUFFLG9CQUFvQixFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzdFLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7Ozs7Ozs7OztBQWU3QixNQUFNLE9BQU8sd0NB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Q0FBd0M7a0JBYnBELFNBQVM7K0JBQ0UscUNBQXFDLGNBR25DLGVBQWUsYUFDaEI7d0JBQ1Q7NEJBQ0UsT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUseUNBQXlDLENBQUM7NEJBQ3ZFLEtBQUssRUFBRSxJQUFJO3lCQUNaO3FCQUNGO2tHQVVELG1CQUFtQjtzQkFEbEIsS0FBSztnQkFJTixVQUFVO3NCQURULEtBQUs7Z0JBSU4sa0JBQWtCO3NCQURqQixLQUFLO2dCQUlOLGVBQWU7c0JBRGQsS0FBSztnQkFJTixpQkFBaUI7c0JBRGhCLEtBQUs7Z0JBSU4sZUFBZTtzQkFEZCxLQUFLO2dCQUlOLGFBQWE7c0JBRFosS0FBSztnQkFJTixhQUFhO3NCQURaLEtBQUs7Z0JBSU4sWUFBWTtzQkFEWCxLQUFLO2dCQUlOLE9BQU87c0JBRE4sS0FBSztnQkFJTixXQUFXO3NCQURWLEtBQUs7Z0JBSU4sWUFBWTtzQkFEWCxLQUFLO2dCQUlOLEtBQUs7c0JBREosS0FBSztnQkFLTixJQUFJO3NCQURILEtBQUs7Z0JBSU4sUUFBUTtzQkFEUCxLQUFLO2dCQUlOLGFBQWE7c0JBRFosS0FBSztnQkFHVyxNQUFNO3NCQUF0QixLQUFLO2dCQUdOLHFCQUFxQjtzQkFEcEIsTUFBTTtnQkFvQkgsS0FBSztzQkFEUixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgZm9yd2FyZFJlZiwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q29udHJvbFZhbHVlQWNjZXNzb3IsIEZvcm1CdWlsZGVyLCBGb3JtR3JvdXAsIE5HX1ZBTFVFX0FDQ0VTU09SLCBWYWxpZGF0b3JzfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7cGFyc2VHZXJtYW5BZGRyZXNzfSBmcm9tICcuLi8uLi9oZWxwZXJzL3BhcnNlcic7XG5pbXBvcnQge0dlcm1hbkFkZHJlc3N9IGZyb20gJy4uLy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtBcHBlYXJhbmNlfSBmcm9tICcuLi9tYXQtZ29vZ2xlLW1hcHMtYXV0b2NvbXBsZXRlLmNvbXBvbmVudCc7XG5pbXBvcnQge0lucHV0QW5pbWF0aW9uc30gZnJvbSAnLi4vLi4vYW5pbWF0aW9ucyc7XG5pbXBvcnQge2RlYm91bmNlVGltZSwgZGlzdGluY3RVbnRpbENoYW5nZWQsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbWF0LXNlYXJjaC1nb29nbGUtbWFwcy1hdXRvY29tcGxldGUnLFxuICB0ZW1wbGF0ZVVybDogJy4vbWF0LXNlYXJjaC1nb29nbGUtbWFwcy1hdXRvY29tcGxldGUuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9tYXQtc2VhcmNoLWdvb2dsZS1tYXBzLWF1dG9jb21wbGV0ZS5jb21wb25lbnQuc2NzcyddLFxuICBhbmltYXRpb25zOiBJbnB1dEFuaW1hdGlvbnMsXG4gIHByb3ZpZGVyczogW1xuICAgIHtcbiAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gTWF0U2VhcmNoR29vZ2xlTWFwc0F1dG9jb21wbGV0ZUNvbXBvbmVudCksXG4gICAgICBtdWx0aTogdHJ1ZVxuICAgIH1cbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBNYXRTZWFyY2hHb29nbGVNYXBzQXV0b2NvbXBsZXRlQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBmb3JtQnVpbGRlcjogRm9ybUJ1aWxkZXIpIHtcbiAgICAvLyBTZXQgdGhlIHByaXZhdGUgZGVmYXVsdHNcbiAgICB0aGlzLl91bnN1YnNjcmliZUFsbCA9IG5ldyBTdWJqZWN0KCk7XG4gIH1cblxuICBASW5wdXQoKVxuICBzZWFyY2hCYXJBcHBlYXJhbmNlOiBzdHJpbmcgfCBBcHBlYXJhbmNlO1xuXG4gIEBJbnB1dCgpXG4gIGFwcGVhcmFuY2U6IHN0cmluZyB8IEFwcGVhcmFuY2UgPSBBcHBlYXJhbmNlLlNUQU5EQVJEO1xuXG4gIEBJbnB1dCgpXG4gIHNlYXJjaEFkZHJlc3NMYWJlbCA9ICdTZWFyY2ggQWRkcmVzcyc7XG5cbiAgQElucHV0KClcbiAgc3RyZWV0TmFtZUxhYmVsID0gJ1N0cmVldCc7XG5cbiAgQElucHV0KClcbiAgc3RyZWV0TnVtYmVyTGFiZWwgPSAnTnIuJztcblxuICBASW5wdXQoKVxuICBwb3N0YWxDb2RlTGFiZWwgPSAnUExaJztcblxuICBASW5wdXQoKVxuICBsb2NhbGl0eUxhYmVsID0gJ0xvY2FsaXR5JztcblxuICBASW5wdXQoKVxuICB2aWNpbml0eUxhYmVsID0gJ1ZpY2luaXR5JztcblxuICBASW5wdXQoKVxuICBzaG93VmljaW5pdHk6IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgY291bnRyeTogc3RyaW5nIHwgc3RyaW5nW107XG5cbiAgQElucHV0KClcbiAgcGxhY2VJZE9ubHk/OiBib29sZWFuO1xuXG4gIEBJbnB1dCgpXG4gIHN0cmljdEJvdW5kcz86IGJvb2xlYW47XG5cbiAgQElucHV0KClcbiAgdHlwZXM/OiBzdHJpbmdbXTtcbiAgLy8gdHlwZXM6IHN0cmluZ1tdID0gWydhZGRyZXNzJ107XG5cbiAgQElucHV0KClcbiAgdHlwZT86IHN0cmluZztcblxuICBASW5wdXQoKVxuICByZWFkb25seTogYm9vbGVhbjtcblxuICBASW5wdXQoKVxuICBkaXNhYmxlU2VhcmNoOiBib29sZWFuO1xuXG4gIEBJbnB1dCgpIHByaXZhdGUgX3ZhbHVlOiBHZXJtYW5BZGRyZXNzO1xuXG4gIEBPdXRwdXQoKVxuICBvbkdlcm1hbkFkZHJlc3NNYXBwZWQ6IEV2ZW50RW1pdHRlcjxHZXJtYW5BZGRyZXNzPiA9IG5ldyBFdmVudEVtaXR0ZXI8R2VybWFuQWRkcmVzcz4oKTtcblxuICBnZXJtYW5BZGRyZXNzOiBHZXJtYW5BZGRyZXNzO1xuICBhZGRyZXNzRm9ybUdyb3VwOiBGb3JtR3JvdXA7XG5cbiAgZmlyc3RJbml0ID0gdHJ1ZTtcblxuICAvLyBQcml2YXRlXG4gIHByaXZhdGUgX3Vuc3Vic2NyaWJlQWxsOiBTdWJqZWN0PGFueT47XG5cbiAgcHJvcGFnYXRlQ2hhbmdlID0gKF86IGFueSkgPT4ge1xuICB9O1xuXG5cbiAgZ2V0IHZhbHVlKCk6IEdlcm1hbkFkZHJlc3Mge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHNldCB2YWx1ZSh2YWx1ZTogR2VybWFuQWRkcmVzcykge1xuICAgIHRoaXMuX3ZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgLy8gY29uc29sZS5sb2coJ3NldFZhbHVlJywgdGhpcy5fdmFsdWUpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5jcmVhdGVBZGRyZXNzRm9ybUdyb3VwKCk7XG4gICAgdGhpcy5lbmFibGVDdXN0b21JbnB1dCgpO1xuICB9XG5cbiAgY3JlYXRlQWRkcmVzc0Zvcm1Hcm91cCgpOiB2b2lkIHtcbiAgICB0aGlzLmFkZHJlc3NGb3JtR3JvdXAgPSB0aGlzLmZvcm1CdWlsZGVyLmdyb3VwKHtcbiAgICAgIHN0cmVldE5hbWU6IFt0aGlzLnZhbHVlICYmIHRoaXMudmFsdWUuc3RyZWV0TmFtZSA/IHRoaXMudmFsdWUuc3RyZWV0TmFtZSA6IG51bGwsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgc3RyZWV0TnVtYmVyOiBbdGhpcy52YWx1ZSAmJiB0aGlzLnZhbHVlLnN0cmVldE51bWJlciA/IHRoaXMudmFsdWUuc3RyZWV0TnVtYmVyIDogbnVsbCwgVmFsaWRhdG9ycy5yZXF1aXJlZF0sXG4gICAgICBwb3N0YWxDb2RlOiBbdGhpcy52YWx1ZSAmJiB0aGlzLnZhbHVlLnBvc3RhbENvZGUgPyB0aGlzLnZhbHVlLnBvc3RhbENvZGUgOiBudWxsLCBWYWxpZGF0b3JzLnJlcXVpcmVkXSxcbiAgICAgIHZpY2luaXR5OiBbdGhpcy52YWx1ZSAmJiB0aGlzLnZhbHVlLnZpY2luaXR5ID8gdGhpcy52YWx1ZS52aWNpbml0eSA6IG51bGxdLFxuICAgICAgbG9jYWxpdHk6IHRoaXMuZm9ybUJ1aWxkZXIuZ3JvdXAoe1xuICAgICAgICBsb25nOiBbdGhpcy52YWx1ZSAmJiB0aGlzLnZhbHVlLmxvY2FsaXR5ICYmIHRoaXMudmFsdWUubG9jYWxpdHkubG9uZyA/IHRoaXMudmFsdWUubG9jYWxpdHkubG9uZyA6IG51bGwsIFZhbGlkYXRvcnMucmVxdWlyZWRdLFxuICAgICAgfSksXG4gICAgfSk7XG4gIH1cblxuICBlbmFibGVDdXN0b21JbnB1dCgpIHtcbiAgICB0aGlzLmFkZHJlc3NGb3JtR3JvdXBcbiAgICAgIC5nZXQoJ3N0cmVldE5hbWUnKVxuICAgICAgLnZhbHVlQ2hhbmdlc1xuICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSwgZGVib3VuY2VUaW1lKDQwMCksIHRha2VVbnRpbCh0aGlzLl91bnN1YnNjcmliZUFsbCkpXG4gICAgICAuc3Vic2NyaWJlKHN0cmVldE5hbWUgPT4ge1xuICAgICAgICAhdGhpcy52YWx1ZSA/IHRoaXMudmFsdWUgPSB7c3RyZWV0TmFtZX0gOiB0aGlzLnZhbHVlLnN0cmVldE5hbWUgPSBzdHJlZXROYW1lO1xuICAgICAgICB0aGlzLnZhbHVlLmRpc3BsYXlBZGRyZXNzID0gdGhpcy5wYXJzZURpc3BsYXlBZGRyZXNzKCk7XG4gICAgICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHRoaXMudmFsdWUpO1xuICAgICAgfSk7XG4gICAgdGhpcy5hZGRyZXNzRm9ybUdyb3VwXG4gICAgICAuZ2V0KCdzdHJlZXROdW1iZXInKVxuICAgICAgLnZhbHVlQ2hhbmdlc1xuICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSwgZGVib3VuY2VUaW1lKDQwMCksIHRha2VVbnRpbCh0aGlzLl91bnN1YnNjcmliZUFsbCkpXG4gICAgICAuc3Vic2NyaWJlKHN0cmVldE51bWJlciA9PiB7XG4gICAgICAgICF0aGlzLnZhbHVlID8gdGhpcy52YWx1ZSA9IHtzdHJlZXROdW1iZXJ9IDogdGhpcy52YWx1ZS5zdHJlZXROdW1iZXIgPSBzdHJlZXROdW1iZXI7XG4gICAgICAgIHRoaXMudmFsdWUuZGlzcGxheUFkZHJlc3MgPSB0aGlzLnBhcnNlRGlzcGxheUFkZHJlc3MoKTtcbiAgICAgICAgdGhpcy5wcm9wYWdhdGVDaGFuZ2UodGhpcy52YWx1ZSk7XG4gICAgICB9KTtcbiAgICB0aGlzLmFkZHJlc3NGb3JtR3JvdXBcbiAgICAgIC5nZXQoJ3Bvc3RhbENvZGUnKVxuICAgICAgLnZhbHVlQ2hhbmdlc1xuICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSwgZGVib3VuY2VUaW1lKDQwMCksIHRha2VVbnRpbCh0aGlzLl91bnN1YnNjcmliZUFsbCkpXG4gICAgICAuc3Vic2NyaWJlKHBvc3RhbENvZGUgPT4ge1xuICAgICAgICAhdGhpcy52YWx1ZSA/IHRoaXMudmFsdWUgPSB7cG9zdGFsQ29kZX0gOiB0aGlzLnZhbHVlLnBvc3RhbENvZGUgPSBwb3N0YWxDb2RlO1xuICAgICAgICB0aGlzLnZhbHVlLmRpc3BsYXlBZGRyZXNzID0gdGhpcy5wYXJzZURpc3BsYXlBZGRyZXNzKCk7XG4gICAgICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHRoaXMudmFsdWUpO1xuICAgICAgfSk7XG4gICAgdGhpcy5hZGRyZXNzRm9ybUdyb3VwXG4gICAgICAuZ2V0KCd2aWNpbml0eScpXG4gICAgICAudmFsdWVDaGFuZ2VzXG4gICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCBkZWJvdW5jZVRpbWUoNDAwKSwgdGFrZVVudGlsKHRoaXMuX3Vuc3Vic2NyaWJlQWxsKSlcbiAgICAgIC5zdWJzY3JpYmUodmljaW5pdHkgPT4ge1xuICAgICAgICAhdGhpcy52YWx1ZSA/IHRoaXMudmFsdWUgPSB7dmljaW5pdHl9IDogdGhpcy52YWx1ZS52aWNpbml0eSA9IHZpY2luaXR5O1xuICAgICAgICB0aGlzLnZhbHVlLmRpc3BsYXlBZGRyZXNzID0gdGhpcy5wYXJzZURpc3BsYXlBZGRyZXNzKCk7XG4gICAgICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHRoaXMudmFsdWUpO1xuICAgICAgfSk7XG4gICAgdGhpcy5hZGRyZXNzRm9ybUdyb3VwXG4gICAgICAuZ2V0KCdsb2NhbGl0eScpXG4gICAgICAudmFsdWVDaGFuZ2VzXG4gICAgICAucGlwZShkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLCBkZWJvdW5jZVRpbWUoNDAwKSwgdGFrZVVudGlsKHRoaXMuX3Vuc3Vic2NyaWJlQWxsKSlcbiAgICAgIC5zdWJzY3JpYmUobG9jYWxpdHkgPT4ge1xuICAgICAgICAhdGhpcy52YWx1ZSA/IHRoaXMudmFsdWUgPSB7bG9jYWxpdHl9IDogdGhpcy52YWx1ZS5sb2NhbGl0eSA9IGxvY2FsaXR5O1xuICAgICAgICB0aGlzLnZhbHVlLmRpc3BsYXlBZGRyZXNzID0gdGhpcy5wYXJzZURpc3BsYXlBZGRyZXNzKCk7XG4gICAgICAgIHRoaXMucHJvcGFnYXRlQ2hhbmdlKHRoaXMudmFsdWUpO1xuICAgICAgfSk7XG4gIH1cblxuICBwYXJzZURpc3BsYXlBZGRyZXNzKCkge1xuICAgIHJldHVybiBgJHt0aGlzLnZhbHVlPy5zdHJlZXROYW1lID8gdGhpcy52YWx1ZT8uc3RyZWV0TmFtZSA6ICcnfSAke3RoaXMudmFsdWU/LnN0cmVldE51bWJlciA/IHRoaXMudmFsdWU/LnN0cmVldE51bWJlciA6ICcnfSR7dGhpcy52YWx1ZT8ucG9zdGFsQ29kZSB8fCB0aGlzLnZhbHVlPy5sb2NhbGl0eT8ubG9uZyA/ICcsICcgOiAnJ30ke3RoaXMudmFsdWU/LnBvc3RhbENvZGUgPyB0aGlzLnZhbHVlPy5wb3N0YWxDb2RlIDogJyd9ICR7dGhpcy52YWx1ZT8ubG9jYWxpdHk/LmxvbmcgPyB0aGlzLnZhbHVlPy5sb2NhbGl0eT8ubG9uZyA6ICcnfWBcbiAgfVxuXG4gIHN5bmNBdXRvQ29tcGxldGUoJGV2ZW50OiBnb29nbGUubWFwcy5wbGFjZXMuUGxhY2VSZXN1bHQpIHtcbiAgICBpZiAodGhpcy5nZXJtYW5BZGRyZXNzKSB7XG4gICAgICB0aGlzLmFkZHJlc3NGb3JtR3JvdXAucmVzZXQoKTtcbiAgICB9XG4gICAgY29uc3QgZ2VybWFuQWRkcmVzczogR2VybWFuQWRkcmVzcyA9IHBhcnNlR2VybWFuQWRkcmVzcygkZXZlbnQpO1xuICAgIHRoaXMuZ2VybWFuQWRkcmVzcyA9IGdlcm1hbkFkZHJlc3M7XG4gICAgaWYgKGdlcm1hbkFkZHJlc3MudmljaW5pdHkpIHtcbiAgICAgIHRoaXMuYWRkcmVzc0Zvcm1Hcm91cC5nZXQoJ3ZpY2luaXR5JykucGF0Y2hWYWx1ZShnZXJtYW5BZGRyZXNzLnZpY2luaXR5LCB7ZW1pdEV2ZW50OiBmYWxzZSwgb25seVNlbGY6IHRydWV9KTtcbiAgICB9XG4gICAgaWYgKGdlcm1hbkFkZHJlc3Muc3RyZWV0TmFtZSkge1xuICAgICAgdGhpcy5hZGRyZXNzRm9ybUdyb3VwLmdldCgnc3RyZWV0TmFtZScpLnBhdGNoVmFsdWUoZ2VybWFuQWRkcmVzcy5zdHJlZXROYW1lLCB7ZW1pdEV2ZW50OiBmYWxzZSwgb25seVNlbGY6IHRydWV9KTtcbiAgICB9XG4gICAgaWYgKGdlcm1hbkFkZHJlc3Muc3RyZWV0TnVtYmVyKSB7XG4gICAgICB0aGlzLmFkZHJlc3NGb3JtR3JvdXAuZ2V0KCdzdHJlZXROdW1iZXInKS5wYXRjaFZhbHVlKGdlcm1hbkFkZHJlc3Muc3RyZWV0TnVtYmVyLnRvU3RyaW5nKCksIHtlbWl0RXZlbnQ6IGZhbHNlLCBvbmx5U2VsZjogdHJ1ZX0pO1xuICAgIH1cbiAgICBpZiAoZ2VybWFuQWRkcmVzcy5wb3N0YWxDb2RlKSB7XG4gICAgICB0aGlzLmFkZHJlc3NGb3JtR3JvdXAuZ2V0KCdwb3N0YWxDb2RlJykucGF0Y2hWYWx1ZShnZXJtYW5BZGRyZXNzLnBvc3RhbENvZGUsIHtlbWl0RXZlbnQ6IGZhbHNlLCBvbmx5U2VsZjogdHJ1ZX0pO1xuICAgIH1cbiAgICBpZiAoZ2VybWFuQWRkcmVzcy5sb2NhbGl0eSAmJiBnZXJtYW5BZGRyZXNzLmxvY2FsaXR5LmxvbmcpIHtcbiAgICAgIHRoaXMuYWRkcmVzc0Zvcm1Hcm91cC5nZXQoJ2xvY2FsaXR5LmxvbmcnKS5wYXRjaFZhbHVlKGdlcm1hbkFkZHJlc3MubG9jYWxpdHkubG9uZywge2VtaXRFdmVudDogZmFsc2UsIG9ubHlTZWxmOiB0cnVlfSk7XG4gICAgfVxuXG4gICAgdGhpcy52YWx1ZSA9IGdlcm1hbkFkZHJlc3M7XG4gICAgdGhpcy5vbkdlcm1hbkFkZHJlc3NNYXBwZWQuZW1pdChnZXJtYW5BZGRyZXNzKTtcbiAgfVxuXG4gIHdyaXRlVmFsdWUob2JqOiBhbnkpOiB2b2lkIHtcbiAgICBsZXQgc2hvdWxkUmVjcmVhdGVGRyA9IGZhbHNlO1xuICAgIGlmIChvYmopIHtcbiAgICAgIGlmICghdGhpcy52YWx1ZSAmJiB0aGlzLmZpcnN0SW5pdCkge1xuICAgICAgICBzaG91bGRSZWNyZWF0ZUZHID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMudmFsdWUgPSBvYmo7XG4gICAgICBpZiAoc2hvdWxkUmVjcmVhdGVGRykge1xuICAgICAgICB0aGlzLmNyZWF0ZUFkZHJlc3NGb3JtR3JvdXAoKTtcbiAgICAgICAgdGhpcy5maXJzdEluaXQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcbiAgICB0aGlzLnByb3BhZ2F0ZUNoYW5nZSA9IGZuO1xuICB9XG5cbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xuICB9XG5cbiAgc2V0RGlzYWJsZWRTdGF0ZShpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gIH1cblxufVxuIiwiPGRpdiBmeExheW91dD1cImNvbHVtblwiPlxuICA8ZGl2ICpuZ0lmPVwiIWRpc2FibGVTZWFyY2hcIiBmeEZsZXg9XCIxMDBcIj5cbiAgICA8IS0tc2VhcmNoIGFkZHJlc3MtLT5cbiAgICA8bWF0LWZvcm0tZmllbGQgZnhGbGV4PVwiYXV0b1wiIFthcHBlYXJhbmNlXT1cInNlYXJjaEJhckFwcGVhcmFuY2VcIiBbQGFuaW1hdGVdPVwieyB2YWx1ZTogJyonLCBwYXJhbXM6IHsgeTogJzEwMCUnIH0gfVwiPlxuICAgICAgPG1hdC1sYWJlbD57e3NlYXJjaEFkZHJlc3NMYWJlbH19PC9tYXQtbGFiZWw+XG4gICAgICA8aW5wdXRcbiAgICAgICAgKG9uQXV0b2NvbXBsZXRlU2VsZWN0ZWQpPVwic3luY0F1dG9Db21wbGV0ZSgkZXZlbnQpXCJcbiAgICAgICAgW2NvdW50cnldPVwiY291bnRyeVwiXG4gICAgICAgIFtwbGFjZUlkT25seV09XCJwbGFjZUlkT25seVwiXG4gICAgICAgIFtzdHJpY3RCb3VuZHNdPVwic3RyaWN0Qm91bmRzXCJcbiAgICAgICAgW3R5cGVzXT1cInR5cGVzXCJcbiAgICAgICAgW3R5cGVdPVwidHlwZVwiXG4gICAgICAgIG1hdEdvb2dsZU1hcHNBdXRvY29tcGxldGVcbiAgICAgICAgbWF0SW5wdXRcbiAgICAgICAgcmVxdWlyZWRcbiAgICAgIC8+XG4gICAgICA8bWF0LWljb24gY29sb3I9XCJwcmltYXJ5XCIgbWF0U3VmZml4PnNlYXJjaDwvbWF0LWljb24+XG4gICAgICA8IS0tICAgIDxtYXQtZXJyb3I+e3sgJ21zYS5jb250YWN0RGF0YS5jdXJyZW50QWRkcmVzcy5lcnJvcicgfCB0cmFuc2xhdGUgfX08L21hdC1lcnJvcj4tLT5cbiAgICA8L21hdC1mb3JtLWZpZWxkPlxuICA8L2Rpdj5cblxuICA8Zm9ybSBbZm9ybUdyb3VwXT1cImFkZHJlc3NGb3JtR3JvdXBcIiBmeEZsZXggZnhMYXlvdXRHYXA9XCIxMHB4XCI+XG4gICAgPGRpdiBmeExheW91dD1cInJvd1wiIGZ4TGF5b3V0R2FwPVwiMTBweFwiPlxuICAgICAgPG1hdC1mb3JtLWZpZWxkIGZ4RmxleD1cIjgwXCJcbiAgICAgICAgICAgICAgICAgICAgICBbYXBwZWFyYW5jZV09XCJhcHBlYXJhbmNlXCJcbiAgICAgICAgICAgICAgICAgICAgICBbQGFuaW1hdGVdPVwieyB2YWx1ZTogJyonLCBwYXJhbXM6IHsgeTogJzEwMCUnIH0gfVwiPlxuICAgICAgICA8bWF0LWxhYmVsPnt7c3RyZWV0TmFtZUxhYmVsfX08L21hdC1sYWJlbD5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgW3JlYWRvbmx5XT1cInJlYWRvbmx5XCJcbiAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJzdHJlZXROYW1lXCJcbiAgICAgICAgICBtYXRJbnB1dFxuICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgIC8+XG4gICAgICAgIDwhLS0gICAgICAgIDxtYXQtaWNvbiBjb2xvcj1cInByaW1hcnlcIiBtYXRTdWZmaXg+YWRkX2xvY2F0aW9uPC9tYXQtaWNvbj4tLT5cbiAgICAgICAgPCEtLSAgICA8bWF0LWVycm9yPnt7ICdtc2EuY29udGFjdERhdGEuY3VycmVudEFkZHJlc3MuZXJyb3InIHwgdHJhbnNsYXRlIH19PC9tYXQtZXJyb3I+LS0+XG4gICAgICA8L21hdC1mb3JtLWZpZWxkPlxuICAgICAgPG1hdC1mb3JtLWZpZWxkIGZ4RmxleD1cIjIwXCIgW2FwcGVhcmFuY2VdPVwiYXBwZWFyYW5jZVwiIFtAYW5pbWF0ZV09XCJ7IHZhbHVlOiAnKicsIHBhcmFtczogeyB5OiAnMTAwJScgfSB9XCI+XG4gICAgICAgIDxtYXQtbGFiZWw+e3tzdHJlZXROdW1iZXJMYWJlbH19PC9tYXQtbGFiZWw+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIFtyZWFkb25seV09XCJyZWFkb25seVwiXG4gICAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwic3RyZWV0TnVtYmVyXCJcbiAgICAgICAgICBtYXRJbnB1dFxuICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgIC8+XG4gICAgICAgIDwhLS0gICAgICAgIDxtYXQtaWNvbiBjb2xvcj1cInByaW1hcnlcIiBtYXRTdWZmaXg+YWRkX2xvY2F0aW9uPC9tYXQtaWNvbj4tLT5cbiAgICAgICAgPCEtLSAgICA8bWF0LWVycm9yPnt7ICdtc2EuY29udGFjdERhdGEuY3VycmVudEFkZHJlc3MuZXJyb3InIHwgdHJhbnNsYXRlIH19PC9tYXQtZXJyb3I+LS0+XG4gICAgICA8L21hdC1mb3JtLWZpZWxkPlxuICAgIDwvZGl2PlxuICAgIDxkaXYgZnhMYXlvdXQ9XCJyb3dcIiBmeExheW91dEdhcD1cIjEwcHhcIj5cbiAgICAgIDxtYXQtZm9ybS1maWVsZCBmeEZsZXg9XCIyMFwiIFthcHBlYXJhbmNlXT1cImFwcGVhcmFuY2VcIiBbQGFuaW1hdGVdPVwieyB2YWx1ZTogJyonLCBwYXJhbXM6IHsgeTogJzEwMCUnIH0gfVwiPlxuICAgICAgICA8bWF0LWxhYmVsPnt7cG9zdGFsQ29kZUxhYmVsfX08L21hdC1sYWJlbD5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgW3JlYWRvbmx5XT1cInJlYWRvbmx5XCJcbiAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJwb3N0YWxDb2RlXCJcbiAgICAgICAgICB0eXBlPVwibnVtYmVyXCJcbiAgICAgICAgICBtYXRJbnB1dFxuICAgICAgICAgIHJlcXVpcmVkXG4gICAgICAgIC8+XG4gICAgICAgIDwhLS0gICAgICAgIDxtYXQtaWNvbiBjb2xvcj1cInByaW1hcnlcIiBtYXRTdWZmaXg+YWRkX2xvY2F0aW9uPC9tYXQtaWNvbj4tLT5cbiAgICAgICAgPCEtLSAgICA8bWF0LWVycm9yPnt7ICdtc2EuY29udGFjdERhdGEuY3VycmVudEFkZHJlc3MuZXJyb3InIHwgdHJhbnNsYXRlIH19PC9tYXQtZXJyb3I+LS0+XG4gICAgICA8L21hdC1mb3JtLWZpZWxkPlxuICAgICAgPG1hdC1mb3JtLWZpZWxkICpuZ0lmPVwic2hvd1ZpY2luaXR5XCIgZnhGbGV4PVwiYXV0b1wiXG4gICAgICAgICAgICAgICAgICAgICAgW2FwcGVhcmFuY2VdPVwiYXBwZWFyYW5jZVwiXG4gICAgICAgICAgICAgICAgICAgICAgW0BhbmltYXRlXT1cInsgdmFsdWU6ICcqJywgcGFyYW1zOiB7IHk6ICcxMDAlJyB9IH1cIj5cbiAgICAgICAgPG1hdC1sYWJlbD57e3ZpY2luaXR5TGFiZWx9fTwvbWF0LWxhYmVsPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBbcmVhZG9ubHldPVwicmVhZG9ubHlcIlxuICAgICAgICAgIG1hdElucHV0XG4gICAgICAgICAgZm9ybUNvbnRyb2xOYW1lPVwidmljaW5pdHlcIlxuICAgICAgICAvPlxuICAgICAgPC9tYXQtZm9ybS1maWVsZD5cbiAgICAgIDxkaXYgZm9ybUdyb3VwTmFtZT1cImxvY2FsaXR5XCIgZnhGbGV4PVwiYXV0b1wiPlxuICAgICAgICA8bWF0LWZvcm0tZmllbGQgZnhGbGV4PVwiYXV0b1wiIFthcHBlYXJhbmNlXT1cImFwcGVhcmFuY2VcIiBbQGFuaW1hdGVdPVwieyB2YWx1ZTogJyonLCBwYXJhbXM6IHsgeTogJzEwMCUnIH0gfVwiPlxuICAgICAgICAgIDxtYXQtbGFiZWw+e3tsb2NhbGl0eUxhYmVsfX08L21hdC1sYWJlbD5cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIFtyZWFkb25seV09XCJyZWFkb25seVwiXG4gICAgICAgICAgICBmb3JtQ29udHJvbE5hbWU9XCJsb25nXCJcbiAgICAgICAgICAgIG1hdElucHV0XG4gICAgICAgICAgICByZXF1aXJlZFxuICAgICAgICAgIC8+XG4gICAgICAgICAgPG1hdC1pY29uIGNvbG9yPVwicHJpbWFyeVwiIG1hdFN1ZmZpeD5hZGRfbG9jYXRpb248L21hdC1pY29uPlxuICAgICAgICAgIDwhLS0gICAgPG1hdC1lcnJvcj57eyAnbXNhLmNvbnRhY3REYXRhLmN1cnJlbnRBZGRyZXNzLmVycm9yJyB8IHRyYW5zbGF0ZSB9fTwvbWF0LWVycm9yPi0tPlxuICAgICAgICA8L21hdC1mb3JtLWZpZWxkPlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gIDwvZm9ybT5cbjwvZGl2PlxuIl19