import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./stripe.service";
export class StripeElementsService {
    constructor(stripeService) {
        this.stripeService = stripeService;
    }
    elements(stripe, options = {}) {
        if (stripe) {
            if (Object.keys(options).length > 0) {
                return stripe.elements(options);
            }
            return stripe.elements();
        }
        else {
            if (Object.keys(options).length > 0) {
                return this.stripeService.elements(options);
            }
            return this.stripeService.elements();
        }
    }
    paymentRequest(stripe, options) {
        return stripe ? stripe.paymentRequest(options) : this.stripeService.paymentRequest(options);
    }
    mergeOptions(options, containerClass) {
        if (!containerClass || (options && options.classes)) {
            return options || {};
        }
        if (!options || !options.classes) {
            return {
                ...(options || {}),
                classes: {
                    base: containerClass,
                    complete: `${containerClass}--complete`,
                    empty: `${containerClass}--empty`,
                    focus: `${containerClass}--focus`,
                    invalid: `${containerClass}--invalid`,
                    webkitAutoFill: `${containerClass}--webkit-autoFill`
                }
            };
        }
        return options || {};
    }
}
StripeElementsService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: StripeElementsService, deps: [{ token: i1.StripeService }], target: i0.ɵɵFactoryTarget.Injectable });
StripeElementsService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: StripeElementsService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: StripeElementsService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.StripeService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc3RyaXBlL3NyYy9saWIvc2VydmljZXMvc3RyaXBlLWVsZW1lbnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7O0FBc0IzQyxNQUFNLE9BQU8scUJBQXFCO0lBQ2hDLFlBQW9CLGFBQTRCO1FBQTVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0lBQUcsQ0FBQztJQUVwRCxRQUFRLENBQUMsTUFBTSxFQUFFLFVBQWlDLEVBQUU7UUFDbEQsSUFBSSxNQUFNLEVBQUU7WUFDVixJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQ2pDO1lBQ0QsT0FBTyxNQUFNLENBQUMsUUFBUSxFQUFFLENBQUM7U0FDMUI7YUFBTTtZQUNMLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUNuQyxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzdDO1lBQ0QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO1NBQ3RDO0lBQ0gsQ0FBQztJQUVELGNBQWMsQ0FBQyxNQUFNLEVBQUUsT0FBOEI7UUFDbkQsT0FBTyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzlGLENBQUM7SUFjRCxZQUFZLENBQUMsT0FBTyxFQUFFLGNBQXNCO1FBQzFDLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFO1lBQ25ELE9BQU8sT0FBTyxJQUFJLEVBQUUsQ0FBQztTQUN0QjtRQUVELElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ2hDLE9BQU87Z0JBQ0wsR0FBRyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUM7Z0JBQ2xCLE9BQU8sRUFBRTtvQkFDUCxJQUFJLEVBQUUsY0FBYztvQkFDcEIsUUFBUSxFQUFFLEdBQUcsY0FBYyxZQUFZO29CQUN2QyxLQUFLLEVBQUUsR0FBRyxjQUFjLFNBQVM7b0JBQ2pDLEtBQUssRUFBRSxHQUFHLGNBQWMsU0FBUztvQkFDakMsT0FBTyxFQUFFLEdBQUcsY0FBYyxXQUFXO29CQUNyQyxjQUFjLEVBQUUsR0FBRyxjQUFjLG1CQUFtQjtpQkFDckQ7YUFDRixDQUFDO1NBQ0g7UUFFRCxPQUFPLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDdkIsQ0FBQzs7a0hBckRVLHFCQUFxQjtzSEFBckIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7XG4gIFBheW1lbnRSZXF1ZXN0LFxuICBQYXltZW50UmVxdWVzdE9wdGlvbnMsXG4gIFN0cmlwZUNhcmRFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlQXVCYW5rQWNjb3VudEVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVDYXJkTnVtYmVyRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUNhcmRFeHBpcnlFbGVtZW50T3B0aW9ucyxcbiAgU3RyaXBlRWxlbWVudHMsXG4gIFN0cmlwZUVsZW1lbnRzT3B0aW9ucyxcbiAgU3RyaXBlRnB4QmFua0VsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVJYmFuRWxlbWVudE9wdGlvbnMsXG4gIFN0cmlwZUlkZWFsQmFua0VsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRPcHRpb25zLFxuICBTdHJpcGVQYXltZW50RWxlbWVudE9wdGlvbnNcbn0gZnJvbSAnQHN0cmlwZS9zdHJpcGUtanMnO1xuXG5pbXBvcnQgeyBTdHJpcGVTZXJ2aWNlIH0gZnJvbSAnLi9zdHJpcGUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTdHJpcGVFbGVtZW50c1NlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHN0cmlwZVNlcnZpY2U6IFN0cmlwZVNlcnZpY2UpIHt9XG5cbiAgZWxlbWVudHMoc3RyaXBlLCBvcHRpb25zOiBTdHJpcGVFbGVtZW50c09wdGlvbnMgPSB7fSk6IE9ic2VydmFibGU8U3RyaXBlRWxlbWVudHM+IHtcbiAgICBpZiAoc3RyaXBlKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gc3RyaXBlLmVsZW1lbnRzKG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHN0cmlwZS5lbGVtZW50cygpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMob3B0aW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHJpcGVTZXJ2aWNlLmVsZW1lbnRzKG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuc3RyaXBlU2VydmljZS5lbGVtZW50cygpO1xuICAgIH1cbiAgfVxuXG4gIHBheW1lbnRSZXF1ZXN0KHN0cmlwZSwgb3B0aW9uczogUGF5bWVudFJlcXVlc3RPcHRpb25zKTogUGF5bWVudFJlcXVlc3QgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBzdHJpcGUgPyBzdHJpcGUucGF5bWVudFJlcXVlc3Qob3B0aW9ucykgOiB0aGlzLnN0cmlwZVNlcnZpY2UucGF5bWVudFJlcXVlc3Qob3B0aW9ucyk7XG4gIH1cblxuICBtZXJnZU9wdGlvbnMob3B0aW9uczogU3RyaXBlQ2FyZEVsZW1lbnRPcHRpb25zLCBjb250YWluZXJDbGFzczogc3RyaW5nKTogU3RyaXBlQ2FyZEVsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMob3B0aW9uczogU3RyaXBlQ2FyZE51bWJlckVsZW1lbnRPcHRpb25zLCBjb250YWluZXJDbGFzczogc3RyaW5nKTogU3RyaXBlQ2FyZE51bWJlckVsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMob3B0aW9uczogU3RyaXBlQ2FyZEV4cGlyeUVsZW1lbnRPcHRpb25zLCBjb250YWluZXJDbGFzczogc3RyaW5nKTogU3RyaXBlQ2FyZEV4cGlyeUVsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMob3B0aW9uczogU3RyaXBlRnB4QmFua0VsZW1lbnRPcHRpb25zLCBjb250YWluZXJDbGFzczogc3RyaW5nKTogU3RyaXBlRnB4QmFua0VsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMob3B0aW9uczogU3RyaXBlSWJhbkVsZW1lbnRPcHRpb25zLCBjb250YWluZXJDbGFzczogc3RyaW5nKTogU3RyaXBlSWJhbkVsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMob3B0aW9uczogU3RyaXBlSWRlYWxCYW5rRWxlbWVudE9wdGlvbnMsIGNvbnRhaW5lckNsYXNzOiBzdHJpbmcpOiBTdHJpcGVJZGVhbEJhbmtFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKG9wdGlvbnM6IFN0cmlwZUF1QmFua0FjY291bnRFbGVtZW50T3B0aW9ucywgY29udGFpbmVyQ2xhc3M6IHN0cmluZyk6IFN0cmlwZUF1QmFua0FjY291bnRFbGVtZW50T3B0aW9ucztcbiAgbWVyZ2VPcHRpb25zKFxuICAgIG9wdGlvbnM6IFN0cmlwZVBheW1lbnRSZXF1ZXN0QnV0dG9uRWxlbWVudE9wdGlvbnMsXG4gICAgY29udGFpbmVyQ2xhc3M6IHN0cmluZ1xuICApOiBTdHJpcGVQYXltZW50UmVxdWVzdEJ1dHRvbkVsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMob3B0aW9uczogU3RyaXBlUGF5bWVudEVsZW1lbnRPcHRpb25zLCBjb250YWluZXJDbGFzczogc3RyaW5nKTogU3RyaXBlUGF5bWVudEVsZW1lbnRPcHRpb25zO1xuICBtZXJnZU9wdGlvbnMob3B0aW9ucywgY29udGFpbmVyQ2xhc3M6IHN0cmluZykge1xuICAgIGlmICghY29udGFpbmVyQ2xhc3MgfHwgKG9wdGlvbnMgJiYgb3B0aW9ucy5jbGFzc2VzKSkge1xuICAgICAgcmV0dXJuIG9wdGlvbnMgfHwge307XG4gICAgfVxuXG4gICAgaWYgKCFvcHRpb25zIHx8ICFvcHRpb25zLmNsYXNzZXMpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLihvcHRpb25zIHx8IHt9KSxcbiAgICAgICAgY2xhc3Nlczoge1xuICAgICAgICAgIGJhc2U6IGNvbnRhaW5lckNsYXNzLFxuICAgICAgICAgIGNvbXBsZXRlOiBgJHtjb250YWluZXJDbGFzc30tLWNvbXBsZXRlYCxcbiAgICAgICAgICBlbXB0eTogYCR7Y29udGFpbmVyQ2xhc3N9LS1lbXB0eWAsXG4gICAgICAgICAgZm9jdXM6IGAke2NvbnRhaW5lckNsYXNzfS0tZm9jdXNgLFxuICAgICAgICAgIGludmFsaWQ6IGAke2NvbnRhaW5lckNsYXNzfS0taW52YWxpZGAsXG4gICAgICAgICAgd2Via2l0QXV0b0ZpbGw6IGAke2NvbnRhaW5lckNsYXNzfS0td2Via2l0LWF1dG9GaWxsYFxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb25zIHx8IHt9O1xuICB9XG59XG4iXX0=