import { Component, Input, ViewChild, EventEmitter, Output } from '@angular/core';
import { from } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "../services/stripe-elements.service";
export class StripePaymentRequestButtonComponent {
    constructor(stripeElementsService) {
        this.stripeElementsService = stripeElementsService;
        this.load = new EventEmitter();
        this.change = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.ready = new EventEmitter();
        this.token = new EventEmitter();
        this.paymentMethod = new EventEmitter();
        this.source = new EventEmitter();
        this.cancel = new EventEmitter();
        this.shippingaddresschange = new EventEmitter();
        this.shippingoptionchange = new EventEmitter();
        this.notavailable = new EventEmitter();
    }
    async ngOnChanges(changes) {
        const options = this.stripeElementsService.mergeOptions(this.options, this.containerClass);
        const elementsOptions = this.elementsOptions;
        const stripe = this.stripe;
        let updateElements = false;
        if (changes.elementsOptions || changes.stripe || !this.elements) {
            const elements = await this.stripeElementsService.elements(stripe, elementsOptions).toPromise();
            this.elements = elements;
            updateElements = true;
        }
        if (changes.paymentOptions && this.paymentRequest) {
            this.updateRequest(this.paymentOptions);
        }
        if (changes.options || changes.containerClass || !this.element || updateElements) {
            if (this.element && !updateElements) {
                this.update(options);
            }
            else if (this.elements && updateElements) {
                this.paymentRequest = this.stripeElementsService.paymentRequest(stripe, this.paymentOptions);
                this.paymentRequest.on('token', (ev) => this.token.emit(ev));
                if (this.paymentMethod.observed)
                    this.paymentRequest.on('paymentmethod', (ev) => this.paymentMethod.emit(ev));
                if (this.source.observed && !this.paymentMethod.observed)
                    this.paymentRequest.on('source', (ev) => this.source.emit(ev));
                this.paymentRequest.on('cancel', () => this.cancel.emit());
                this.paymentRequest.on('shippingaddresschange', (ev) => this.shippingaddresschange.emit(ev));
                this.paymentRequest.on('shippingoptionchange', (ev) => this.shippingoptionchange.emit(ev));
                this.element = this.elements.create('paymentRequestButton', {
                    paymentRequest: this.paymentRequest,
                    ...options
                });
                this.canMakePayment().subscribe((result) => {
                    if (result) {
                        this.element.on('click', (ev) => this.change.emit(ev));
                        this.element.on('blur', () => this.blur.emit());
                        this.element.on('focus', () => this.focus.emit());
                        this.element.on('ready', () => this.ready.emit());
                        this.element.mount(this.stripeElementRef.nativeElement);
                        this.load.emit({
                            paymentRequestButton: this.element,
                            paymentRequest: this.paymentRequest
                        });
                    }
                    else {
                        this.notavailable.emit();
                    }
                });
            }
        }
    }
    canMakePayment() {
        return from(this.paymentRequest.canMakePayment());
    }
    update(options) {
        this.element.update(options);
    }
    updateRequest(options) {
        const { currency, total, displayItems, shippingOptions } = options;
        this.paymentRequest.update({
            currency,
            total,
            displayItems,
            shippingOptions
        });
    }
    show() {
        this.paymentRequest.show();
    }
    /**
     * @deprecated
     */
    getButton() {
        return this.element;
    }
}
StripePaymentRequestButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: StripePaymentRequestButtonComponent, deps: [{ token: i1.StripeElementsService }], target: i0.ɵɵFactoryTarget.Component });
StripePaymentRequestButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.3.8", type: StripePaymentRequestButtonComponent, selector: "ngx-stripe-payment-request-button", inputs: { containerClass: "containerClass", paymentOptions: "paymentOptions", options: "options", elementsOptions: "elementsOptions", stripe: "stripe" }, outputs: { load: "load", change: "change", blur: "blur", focus: "focus", ready: "ready", token: "token", paymentMethod: "paymentMethod", source: "source", cancel: "cancel", shippingaddresschange: "shippingaddresschange", shippingoptionchange: "shippingoptionchange", notavailable: "notavailable" }, viewQueries: [{ propertyName: "stripeElementRef", first: true, predicate: ["stripeElementRef"], descendants: true }], usesOnChanges: true, ngImport: i0, template: `<div class="field" #stripeElementRef></div>`, isInline: true });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.3.8", ngImport: i0, type: StripePaymentRequestButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-stripe-payment-request-button',
                    template: `<div class="field" #stripeElementRef></div>`
                }]
        }], ctorParameters: function () { return [{ type: i1.StripeElementsService }]; }, propDecorators: { stripeElementRef: [{
                type: ViewChild,
                args: ['stripeElementRef']
            }], containerClass: [{
                type: Input
            }], paymentOptions: [{
                type: Input
            }], options: [{
                type: Input
            }], elementsOptions: [{
                type: Input
            }], stripe: [{
                type: Input
            }], load: [{
                type: Output
            }], change: [{
                type: Output
            }], blur: [{
                type: Output
            }], focus: [{
                type: Output
            }], ready: [{
                type: Output
            }], token: [{
                type: Output
            }], paymentMethod: [{
                type: Output
            }], source: [{
                type: Output
            }], cancel: [{
                type: Output
            }], shippingaddresschange: [{
                type: Output
            }], shippingoptionchange: [{
                type: Output
            }], notavailable: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,